# -*- coding: utf-8 -*-
"""Copy of Project_janu.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jOsLI1HaMcMhnnKm3rn97kTlF72PXqsp
"""

import dash
from dash import dcc, html, Input, Output
import plotly.graph_objects as go
import pandas as pd

# Load and clean data
file_path = "/content/FINAL-CSV.xlsx"
df = pd.read_excel(file_path)

# Convert to datetime and sort
df["dates"] = pd.to_datetime(df["dates"])
df = df.sort_values("dates")

# Ensure the dataset has a continuous daily date range
full_date_range = pd.date_range(start=df["dates"].min(), end=df["dates"].max(), freq="D")
df_full = pd.DataFrame({"dates": full_date_range})

# Merge with full date range and interpolate missing values
df_interpolated = pd.merge(df_full, df, on="dates", how="left")
df_interpolated["ground_truth"] = df_interpolated["ground_truth"].interpolate(method="linear")
df_interpolated["predictions"] = df_interpolated["predictions"].interpolate(method="linear")

# Get min and max dates for slider
date_list = list(df_interpolated["dates"])
min_date = df_interpolated["dates"].min()
max_date = df_interpolated["dates"].max()

# Initialize Dash App
app = dash.Dash(__name__)

# Layout
app.layout = html.Div([
    html.H1("Smooth Time-Series Forecast Dashboard", style={'textAlign': 'center'}),

    # Graph
    dcc.Graph(id="time-series-graph"),

    # Single Range Slider for Date Selection
    dcc.RangeSlider(
        id="date-range-slider",
        min=0,
        max=len(date_list) - 1,
        step=1,
        value=[0, len(date_list) - 1],  # Default full range
        marks={0: str(min_date.date()), len(date_list) - 1: str(max_date.date())},
        tooltip={"placement": "bottom", "always_visible": True}
    ),
    html.Label("Adjust Date Range", style={"textAlign": "center", "marginTop": "10px"})
])

# Callback for Dynamic Graph Updates
@app.callback(
    Output("time-series-graph", "figure"),
    Input("date-range-slider", "value")
)
def update_graph(slider_range):
    """Update graph dynamically based on selected date range."""

    # Convert slider indices to dates
    start_date = date_list[slider_range[0]]
    end_date = date_list[slider_range[1]]

    # Filter Data for Selected Date Range
    df_filtered = df_interpolated[(df_interpolated["dates"] >= start_date) &
                                  (df_interpolated["dates"] <= end_date)]

    # Define y-axis range (min = 0, step size = 2000)
    y_min = 0
    y_max = ((df_filtered[["ground_truth", "predictions"]].max().max() // 2000) + 1) * 2000

    # Create Figure
    fig = go.Figure()

    # Actual (Ground Truth) with Smooth Line
    fig.add_trace(go.Scatter(
        x=df_filtered["dates"], y=df_filtered["ground_truth"], mode="lines",
        name="Actual Values", line=dict(width=2, color="black", shape="spline")
    ))

    # Predictions with Smooth Line
    fig.add_trace(go.Scatter(
        x=df_filtered["dates"], y=df_filtered["predictions"], mode="lines",
        name="Predicted Values", line=dict(dash="dash", color="red", shape="spline")
    ))

    # Update Layout with Fixed Y-Axis
    fig.update_layout(
        title=f"Smooth Time-Series Data from {start_date.date()} to {end_date.date()}",
        xaxis_title="Date", yaxis_title="Value",
        template="plotly_white",
        hovermode="x unified",
        yaxis=dict(
            range=[y_min, y_max],  # Set y-axis range
            tickmode="linear",
            dtick=2000  # Ensure y-axis increments by 2000
        )
    )

    return fig

# Run App
if __name__ == "__main__":
    app.run(debug=True)

import dash
from dash import dcc, html
import plotly.graph_objects as go
import pandas as pd
import plotly.io as pio

# Load and clean data
file_path = "/content/FINAL-CSV.xlsx"
df = pd.read_excel(file_path)

# Convert to datetime and sort
df["dates"] = pd.to_datetime(df["dates"])
df = df.sort_values("dates")

# Ensure the dataset has a continuous daily date range
full_date_range = pd.date_range(start=df["dates"].min(), end=df["dates"].max(), freq="D")
df_full = pd.DataFrame({"dates": full_date_range})

# Merge with full date range and interpolate missing values
df_interpolated = pd.merge(df_full, df, on="dates", how="left")
df_interpolated["ground_truth"] = df_interpolated["ground_truth"].interpolate(method="linear")
df_interpolated["predictions"] = df_interpolated["predictions"].interpolate(method="linear")

# Create Figure
fig = go.Figure()

# Actual (Ground Truth)
fig.add_trace(go.Scatter(
    x=df_interpolated["dates"], y=df_interpolated["ground_truth"], mode="lines",
    name="Actual Values", line=dict(width=2, color="black", shape="spline")
))

# Predictions
fig.add_trace(go.Scatter(
    x=df_interpolated["dates"], y=df_interpolated["predictions"], mode="lines",
    name="Predicted Values", line=dict(dash="dash", color="red", shape="spline")
))

# Define y-axis range (min = 0, step size = 2000)
y_min = 0
y_max = ((df_interpolated[["ground_truth", "predictions"]].max().max() // 2000) + 1) * 2000

# Update Layout
fig.update_layout(
    title="Smooth Time-Series Data",
    xaxis_title="Date",
    yaxis_title="Value",
    template="plotly_white",
    hovermode="x unified",
    yaxis=dict(
        range=[y_min, y_max],
        tickmode="linear",
        dtick=2000
    )
)

# Save as Static HTML File
pio.write_html(fig, file="dashboard.html", full_html=True)

print("âœ… Dashboard saved as 'dashboard.html'. Upload this file to GitHub Pages!")

!pip install dash plotly pandas

